# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.internal_server_error import InternalServerError
from ...errors.not_found_error import NotFoundError
from ...types.forbidden_error_body import ForbiddenErrorBody
from .types.delete_rule_response import DeleteRuleResponse
from .types.import_rule_response import ImportRuleResponse
from .types.usage_response import UsageResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AssetsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def delete_rule(self, *, id: typing.Optional[str] = OMIT) -> DeleteRuleResponse:
        """
        Delete a specific rule by its ID.

        Parameters:
            - id: typing.Optional[str]. The ID of the rule to delete.
        ---
        from rulebricks.client import RulebricksApi

        client = RulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.assets.delete_rule()
        """
        _request: typing.Dict[str, typing.Any] = {}
        if id is not OMIT:
            _request["id"] = id
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/rules/delete"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteRuleResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def export_rule(self, *, id: str) -> typing.Dict[str, typing.Any]:
        """
        Export a specific rule by its ID.

        Parameters:
            - id: str. The ID of the rule to export.
        ---
        from rulebricks.client import RulebricksApi

        client = RulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.assets.export_rule(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/rules/export"),
            params=remove_none_from_dict({"id": id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def import_rule(
        self,
        *,
        id: str,
        created_at: dt.datetime,
        slug: str,
        updated_at: dt.datetime,
        test_request: typing.Dict[str, typing.Any],
        name: str,
        description: str,
        request_schema: typing.List[typing.Any],
        response_schema: typing.List[typing.Any],
        sample_request: typing.Dict[str, typing.Any],
        sample_response: typing.Dict[str, typing.Any],
        conditions: typing.List[typing.Any],
        published: bool,
        history: typing.List[typing.Any],
    ) -> ImportRuleResponse:
        """
        Import a rule into the user's account.

        Parameters:
            - id: str.

            - created_at: dt.datetime.

            - slug: str.

            - updated_at: dt.datetime.

            - test_request: typing.Dict[str, typing.Any].

            - name: str.

            - description: str.

            - request_schema: typing.List[typing.Any].

            - response_schema: typing.List[typing.Any].

            - sample_request: typing.Dict[str, typing.Any].

            - sample_response: typing.Dict[str, typing.Any].

            - conditions: typing.List[typing.Any].

            - published: bool.

            - history: typing.List[typing.Any].
        ---
        import datetime

        from rulebricks.client import RulebricksApi

        client = RulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.assets.import_rule(
            id="id",
            created_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            slug="slug",
            updated_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            test_request={"key": "value"},
            name="name",
            description="description",
            request_schema=[],
            response_schema=[],
            sample_request={"key": "value"},
            sample_response={"key": "value"},
            conditions=[],
            published=True,
            history=[],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/rules/import"),
            json=jsonable_encoder(
                {
                    "id": id,
                    "createdAt": created_at,
                    "slug": slug,
                    "updatedAt": updated_at,
                    "testRequest": test_request,
                    "name": name,
                    "description": description,
                    "requestSchema": request_schema,
                    "responseSchema": response_schema,
                    "sampleRequest": sample_request,
                    "sampleResponse": sample_response,
                    "conditions": conditions,
                    "published": published,
                    "history": history,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ImportRuleResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(ForbiddenErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(self) -> None:
        """
        List all flows in the organization.

        ---
        from rulebricks.client import RulebricksApi

        client = RulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.assets.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/flows/list"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def usage(self) -> UsageResponse:
        """
        Get the rule execution usage of your organization.

        ---
        from rulebricks.client import RulebricksApi

        client = RulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.assets.usage()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/usage"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UsageResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAssetsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def delete_rule(self, *, id: typing.Optional[str] = OMIT) -> DeleteRuleResponse:
        """
        Delete a specific rule by its ID.

        Parameters:
            - id: typing.Optional[str]. The ID of the rule to delete.
        ---
        from rulebricks.client import AsyncRulebricksApi

        client = AsyncRulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.assets.delete_rule()
        """
        _request: typing.Dict[str, typing.Any] = {}
        if id is not OMIT:
            _request["id"] = id
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/rules/delete"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteRuleResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def export_rule(self, *, id: str) -> typing.Dict[str, typing.Any]:
        """
        Export a specific rule by its ID.

        Parameters:
            - id: str. The ID of the rule to export.
        ---
        from rulebricks.client import AsyncRulebricksApi

        client = AsyncRulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.assets.export_rule(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/rules/export"),
            params=remove_none_from_dict({"id": id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def import_rule(
        self,
        *,
        id: str,
        created_at: dt.datetime,
        slug: str,
        updated_at: dt.datetime,
        test_request: typing.Dict[str, typing.Any],
        name: str,
        description: str,
        request_schema: typing.List[typing.Any],
        response_schema: typing.List[typing.Any],
        sample_request: typing.Dict[str, typing.Any],
        sample_response: typing.Dict[str, typing.Any],
        conditions: typing.List[typing.Any],
        published: bool,
        history: typing.List[typing.Any],
    ) -> ImportRuleResponse:
        """
        Import a rule into the user's account.

        Parameters:
            - id: str.

            - created_at: dt.datetime.

            - slug: str.

            - updated_at: dt.datetime.

            - test_request: typing.Dict[str, typing.Any].

            - name: str.

            - description: str.

            - request_schema: typing.List[typing.Any].

            - response_schema: typing.List[typing.Any].

            - sample_request: typing.Dict[str, typing.Any].

            - sample_response: typing.Dict[str, typing.Any].

            - conditions: typing.List[typing.Any].

            - published: bool.

            - history: typing.List[typing.Any].
        ---
        import datetime

        from rulebricks.client import AsyncRulebricksApi

        client = AsyncRulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.assets.import_rule(
            id="id",
            created_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            slug="slug",
            updated_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            test_request={"key": "value"},
            name="name",
            description="description",
            request_schema=[],
            response_schema=[],
            sample_request={"key": "value"},
            sample_response={"key": "value"},
            conditions=[],
            published=True,
            history=[],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/rules/import"),
            json=jsonable_encoder(
                {
                    "id": id,
                    "createdAt": created_at,
                    "slug": slug,
                    "updatedAt": updated_at,
                    "testRequest": test_request,
                    "name": name,
                    "description": description,
                    "requestSchema": request_schema,
                    "responseSchema": response_schema,
                    "sampleRequest": sample_request,
                    "sampleResponse": sample_response,
                    "conditions": conditions,
                    "published": published,
                    "history": history,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ImportRuleResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(ForbiddenErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(self) -> None:
        """
        List all flows in the organization.

        ---
        from rulebricks.client import AsyncRulebricksApi

        client = AsyncRulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.assets.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/flows/list"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def usage(self) -> UsageResponse:
        """
        Get the rule execution usage of your organization.

        ---
        from rulebricks.client import AsyncRulebricksApi

        client = AsyncRulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.assets.usage()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/usage"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UsageResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
