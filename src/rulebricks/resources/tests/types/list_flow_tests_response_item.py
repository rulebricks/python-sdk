# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ListFlowTestsResponseItem(pydantic.BaseModel):
    id: str = pydantic.Field(description="Unique identifier for the test.")
    name: str = pydantic.Field(description="The name of the test.")
    request: typing.Dict[str, typing.Any] = pydantic.Field(description="The request object for the test.")
    response: typing.Dict[str, typing.Any] = pydantic.Field(description="The expected response object for the test.")
    critical: bool = pydantic.Field(description="Indicates whether the test is critical.")
    error: bool = pydantic.Field(description="Indicates if the test resulted in an error.")
    success: bool = pydantic.Field(description="Indicates if the test was successful.")
    test_state: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="testState", description="The state of the test after execution."
    )
    last_executed: typing.Optional[dt.datetime] = pydantic.Field(
        alias="lastExecuted", description="The timestamp when the test was last executed."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
