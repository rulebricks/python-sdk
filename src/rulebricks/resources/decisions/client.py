# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.datetime_utils import serialize_datetime
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.bad_request_error import BadRequestError
from ...errors.internal_server_error import InternalServerError
from .types.query_response import QueryResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class DecisionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def query(
        self,
        *,
        slug: str,
        from_: typing.Optional[dt.datetime] = None,
        to: typing.Optional[dt.datetime] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
    ) -> QueryResponse:
        """
        Retrieve logs for a specific user and rule, with optional date range and pagination.

        Parameters:
            - slug: str. The slug of the rule to query logs for.

            - from_: typing.Optional[dt.datetime]. Start date for the query range (ISO8601 format).

            - to: typing.Optional[dt.datetime]. End date for the query range (ISO8601 format).

            - cursor: typing.Optional[str]. Cursor for pagination.

            - limit: typing.Optional[int]. Number of results to return per page.
        ---
        from rulebricks.client import RulebricksApi

        client = RulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.decisions.query(
            slug="slug",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/decisions/query"),
            params=remove_none_from_dict(
                {
                    "slug": slug,
                    "from": serialize_datetime(from_) if from_ is not None else None,
                    "to": serialize_datetime(to) if to is not None else None,
                    "cursor": cursor,
                    "limit": limit,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(QueryResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDecisionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def query(
        self,
        *,
        slug: str,
        from_: typing.Optional[dt.datetime] = None,
        to: typing.Optional[dt.datetime] = None,
        cursor: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
    ) -> QueryResponse:
        """
        Retrieve logs for a specific user and rule, with optional date range and pagination.

        Parameters:
            - slug: str. The slug of the rule to query logs for.

            - from_: typing.Optional[dt.datetime]. Start date for the query range (ISO8601 format).

            - to: typing.Optional[dt.datetime]. End date for the query range (ISO8601 format).

            - cursor: typing.Optional[str]. Cursor for pagination.

            - limit: typing.Optional[int]. Number of results to return per page.
        ---
        from rulebricks.client import AsyncRulebricksApi

        client = AsyncRulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.decisions.query(
            slug="slug",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/decisions/query"),
            params=remove_none_from_dict(
                {
                    "slug": slug,
                    "from": serialize_datetime(from_) if from_ is not None else None,
                    "to": serialize_datetime(to) if to is not None else None,
                    "cursor": cursor,
                    "limit": limit,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(QueryResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
