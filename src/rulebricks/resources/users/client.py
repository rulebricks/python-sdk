# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...errors.bad_request_error import BadRequestError
from ...errors.internal_server_error import InternalServerError
from .types.create_group_response import CreateGroupResponse
from .types.invite_request_role import InviteRequestRole
from .types.invite_response import InviteResponse
from .types.list_groups_response_item import ListGroupsResponseItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def invite(
        self,
        *,
        email: str,
        role: typing.Optional[InviteRequestRole] = OMIT,
        access_groups: typing.Optional[typing.List[str]] = OMIT,
    ) -> InviteResponse:
        """
        Invite a new user to the organization or update groupspermissions for an existing user.

        Parameters:
            - email: str. Email of the user to invite.

            - role: typing.Optional[InviteRequestRole]. Role to assign to the user.

            - access_groups: typing.Optional[typing.List[str]]. List of access group names or IDs to assign to the user.
        ---
        from rulebricks import InviteRequestRole
        from rulebricks.client import RulebricksApi

        client = RulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.users.invite(
            email="newuser@example.com",
            role=InviteRequestRole.DEVELOPER,
            access_groups=["group1", "group2"],
        )
        """
        _request: typing.Dict[str, typing.Any] = {"email": email}
        if role is not OMIT:
            _request["role"] = role.value
        if access_groups is not OMIT:
            _request["accessGroups"] = access_groups
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/users/invite"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InviteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_groups(self) -> typing.List[ListGroupsResponseItem]:
        """
        List all user groups available in your Rulebricks organization.

        ---
        from rulebricks.client import RulebricksApi

        client = RulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.users.list_groups()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/users/groups"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ListGroupsResponseItem], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_group(self, *, name: str, description: typing.Optional[str] = OMIT) -> CreateGroupResponse:
        """
        Create a new user group in your Rulebricks organization.

        Parameters:
            - name: str. Unique name of the user group.

            - description: typing.Optional[str]. Description of the user group.
        ---
        from rulebricks.client import RulebricksApi

        client = RulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.users.create_group(
            name="NewGroup",
            description="Description of the new group.",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if description is not OMIT:
            _request["description"] = description
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/users/groups"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateGroupResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def invite(
        self,
        *,
        email: str,
        role: typing.Optional[InviteRequestRole] = OMIT,
        access_groups: typing.Optional[typing.List[str]] = OMIT,
    ) -> InviteResponse:
        """
        Invite a new user to the organization or update groupspermissions for an existing user.

        Parameters:
            - email: str. Email of the user to invite.

            - role: typing.Optional[InviteRequestRole]. Role to assign to the user.

            - access_groups: typing.Optional[typing.List[str]]. List of access group names or IDs to assign to the user.
        ---
        from rulebricks import InviteRequestRole
        from rulebricks.client import AsyncRulebricksApi

        client = AsyncRulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.users.invite(
            email="newuser@example.com",
            role=InviteRequestRole.DEVELOPER,
            access_groups=["group1", "group2"],
        )
        """
        _request: typing.Dict[str, typing.Any] = {"email": email}
        if role is not OMIT:
            _request["role"] = role.value
        if access_groups is not OMIT:
            _request["accessGroups"] = access_groups
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/users/invite"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InviteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_groups(self) -> typing.List[ListGroupsResponseItem]:
        """
        List all user groups available in your Rulebricks organization.

        ---
        from rulebricks.client import AsyncRulebricksApi

        client = AsyncRulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.users.list_groups()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/users/groups"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ListGroupsResponseItem], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_group(self, *, name: str, description: typing.Optional[str] = OMIT) -> CreateGroupResponse:
        """
        Create a new user group in your Rulebricks organization.

        Parameters:
            - name: str. Unique name of the user group.

            - description: typing.Optional[str]. Description of the user group.
        ---
        from rulebricks.client import AsyncRulebricksApi

        client = AsyncRulebricksApi(
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.users.create_group(
            name="NewGroup",
            description="Description of the new group.",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if description is not OMIT:
            _request["description"] = description
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/admin/users/groups"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateGroupResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
