# This file was auto-generated by Fern from our API Definition.

from .types import (
    BooleanValue,
    BulkRuleResponseItem,
    BulkRuleResponseItemError,
    CreateTestRequest,
    DecisionLog,
    DecisionLogDecision,
    DecisionLogDecisionConditionsItemValue,
    DecisionLogRequest,
    DecisionLogResponse,
    DynamicRequestPayload,
    DynamicResponsePayload,
    DynamicValue,
    DynamicValueBase,
    DynamicValueListResponse,
    DynamicValue_Boolean,
    DynamicValue_List,
    DynamicValue_Number,
    DynamicValue_String,
    Error,
    FlowBase,
    FlowDetail,
    FlowExecutionError,
    FlowListResponse,
    Folder,
    FolderListResponse,
    ListValue,
    NumberValue,
    ParallelSolveRequest,
    ParallelSolveRequestValue,
    ParallelSolveResponse,
    RuleBase,
    RuleDetail,
    RuleExport,
    RuleListResponse,
    RuleUsage,
    SchemaField,
    SchemaFieldDefaultValue,
    SchemaFieldType,
    StringValue,
    SuccessMessage,
    Test,
    TestListResponse,
    TestTestState,
    TestTestStateConditionsItemValue,
    TestTestStateEvaluationError,
    UsageStatistics,
    UserGroup,
    UserGroupListResponse,
    UserInviteResponse,
    UserInviteResponseUser,
    ValueLimits,
)
from .errors import BadRequestError, ForbiddenError, InternalServerError, NotFoundError
from . import assets, decisions, flows, rules, tests, users, values
from .client import AsyncRulebricksApi, RulebricksApi
from .users import UserInviteRequestRole
from .values import UpdateValuesRequestValuesValue
from .forge import Rule, Condition, DynamicValue, DynamicValues

class Config:
    api_key: str = ""
    base_url: str = "https://rulebricks.com"
    timeout: float = 10

# Initialize the API clients immediately when the module is loaded
sync_api = RulebricksApi(base_url=Config.base_url, api_key=Config.api_key, timeout=Config.timeout)
async_api = AsyncRulebricksApi(base_url=Config.base_url, api_key=Config.api_key, timeout=Config.timeout)

rules = sync_api.rules
flows = sync_api.flows
assets = sync_api.assets
decisions = sync_api.decisions
tests = sync_api.tests
users = sync_api.users
values = sync_api.values

def configure(api_key: str = "", base_url: str = "https://rulebricks.com", timeout: float = 10.0):
    """Configure your Rulebricks API client. This needs to be called before using other Rulebricks methods."""
    Config.api_key = api_key
    Config.base_url = base_url
    Config.timeout = timeout

    # Reinitialize clients with new config
    global sync_api, async_api
    sync_api = RulebricksApi(base_url=Config.base_url, api_key=Config.api_key, timeout=Config.timeout)
    async_api = AsyncRulebricksApi(base_url=Config.base_url, api_key=Config.api_key, timeout=Config.timeout)

    global rules, flows, assets, decisions, tests, users, values
    rules = sync_api.rules
    flows = sync_api.flows
    assets = sync_api.assets
    decisions = sync_api.decisions
    tests = sync_api.tests
    users = sync_api.users
    values = sync_api.values

__all__ = [
    "AsyncRulebricksApi",
    "BadRequestError",
    "BooleanValue",
    "BulkRuleResponseItem",
    "BulkRuleResponseItemError",
    "CreateTestRequest",
    "DecisionLog",
    "DecisionLogDecision",
    "DecisionLogDecisionConditionsItemValue",
    "DecisionLogRequest",
    "DecisionLogResponse",
    "DynamicRequestPayload",
    "DynamicResponsePayload",
    "DynamicValue",
    "DynamicValueBase",
    "DynamicValueListResponse",
    "DynamicValue_Boolean",
    "DynamicValue_List",
    "DynamicValue_Number",
    "DynamicValue_String",
    "Error",
    "FlowBase",
    "FlowDetail",
    "FlowExecutionError",
    "FlowListResponse",
    "Folder",
    "FolderListResponse",
    "ForbiddenError",
    "InternalServerError",
    "ListValue",
    "NotFoundError",
    "NumberValue",
    "ParallelSolveRequest",
    "ParallelSolveRequestValue",
    "ParallelSolveResponse",
    "RuleBase",
    "RuleDetail",
    "RuleExport",
    "RuleListResponse",
    "RuleUsage",
    "RulebricksApi",
    "SchemaField",
    "SchemaFieldDefaultValue",
    "SchemaFieldType",
    "StringValue",
    "SuccessMessage",
    "Test",
    "TestListResponse",
    "TestTestState",
    "TestTestStateConditionsItemValue",
    "TestTestStateEvaluationError",
    "UpdateValuesRequestValuesValue",
    "UsageStatistics",
    "UserGroup",
    "UserGroupListResponse",
    "UserInviteRequestRole",
    "UserInviteResponse",
    "UserInviteResponseUser",
    "ValueLimits",
    "Rule",
    "Condition",
    "assets",
    "decisions",
    "flows",
    "rules",
    "tests",
    "users",
    "values",
    "configure"
]
