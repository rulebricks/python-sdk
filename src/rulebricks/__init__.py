# This file was auto-generated by Fern from our API Definition.
from .client import RulebricksApi, AsyncRulebricksApi
from .errors import BadRequestError, InternalServerError
from .resources import (
    ListResponseItem,
    ListResponseItemRequestSchemaItem,
    ListResponseItemResponseSchemaItem,
    UsageResponse,
    flows,
    rules,
)

# Configuration to store API key and URL
class Config:
    api_key = None
    base_url = "https://rulebricks.com"

def set_api_key(api_key):
    Config.api_key = api_key

def set_instance_url(base_url):
    Config.base_url = base_url

# Instantiate the APIs directly
api_instance = RulebricksApi(base_url=Config.base_url, api_key=Config.api_key)
async_api_instance = AsyncRulebricksApi(base_url=Config.base_url, api_key=Config.api_key)

# Import modules directly for easier access
from .resources import *

# Simplify access to the asynchronous API via a dedicated namespace
class AsyncNamespace:
    def __init__(self, async_client):
        self._client = async_client

    def __getattr__(self, item):
        async def async_method(*args, **kwargs):
            func = getattr(self._client, item)
            return await func(*args, **kwargs)
        return async_method

async_api = AsyncNamespace(async_api_instance)

__all__ = [
    "BadRequestError",
    "InternalServerError",
    "ListResponseItem",
    "ListResponseItemRequestSchemaItem",
    "ListResponseItemResponseSchemaItem",
    "UsageResponse",
    "flows",
    "rules",
    "set_api_key",
    "set_instance_url",
    "async_api",
]
