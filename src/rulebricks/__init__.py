# This file was auto-generated by Fern from our API Definition.
from .client import RulebricksApi, AsyncRulebricksApi
from .errors import BadRequestError, InternalServerError
from .resources import (
    ListResponseItem,
    ListResponseItemRequestSchemaItem,
    ListResponseItemResponseSchemaItem,
    UsageResponse,
    flows,
    rules,
)

# Configuration to store API key and URL
class Config:
    api_key = None
    base_url = "https://rulebricks.com"

def set_api_key(api_key):
    Config.api_key = api_key

def set_instance_url(base_url):
    Config.base_url = base_url

# Synchronous API access setup
_api_instance = None
def get_api_instance():
    global _api_instance
    if _api_instance is None:
        if Config.api_key is None:
            raise ValueError("API key not set. Use set_api_key() to initialize.")
        _api_instance = RulebricksApi(base_url=Config.base_url, api_key=Config.api_key)
    return _api_instance

def __getattr__(name):
    return getattr(get_api_instance(), name)

# Asynchronous API access setup
_async_api_instance = None
async def get_async_api_instance():
    global _async_api_instance
    if _async_api_instance is None:
        if Config.api_key is None:
            raise ValueError("API key not set. Use set_api_key() to initialize.")
        _async_api_instance = AsyncRulebricksApi(base_url=Config.base_url, api_key=Config.api_key)
    return _async_api_instance

class AsyncAPI:
    def __getattr__(self, name):
        async def async_method(*args, **kwargs):
            instance = await get_async_api_instance()
            func = getattr(instance, name)
            return await func(*args, **kwargs)
        return async_method

# Create a single instance for async access
async_api = AsyncAPI()

__all__ = [
    "BadRequestError",
    "InternalServerError",
    "ListResponseItem",
    "ListResponseItemRequestSchemaItem",
    "ListResponseItemResponseSchemaItem",
    "UsageResponse",
    "flows",
    "rules",
    "set_api_key",
    "set_instance_url",
    "async_api",
]
