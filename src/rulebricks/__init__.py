# This file was auto-generated by Fern from our API Definition.
from typing import Optional
from .client import RulebricksApi, AsyncRulebricksApi
from .errors import BadRequestError, InternalServerError
from .resources import (
    ListResponseItem,
    ListResponseItemRequestSchemaItem,
    ListResponseItemResponseSchemaItem,
    UsageResponse
)
from .resources.rules.client import RulesClient, AsyncRulesClient
from .resources.flows.client import FlowsClient, AsyncFlowsClient

class Config:
    api_key: Optional[str] = None
    base_url: str = "https://rulebricks.com"
    timeout: float = 60

def set_api_key(api_key: str) -> None:
    Config.api_key = api_key
    APIManager.reset_instances()

def set_instance_url(base_url: str) -> None:
    Config.base_url = base_url
    APIManager.reset_instances()

def set_timeout(timeout: float) -> None:
    Config.timeout = timeout
    APIManager.reset_instances()

class LazyAPIManager:
    def __init__(self, client_type):
        self.client_type = client_type
        self._client = None

    def __get__(self, instance, owner):
        if self._client is None or APIManager.needs_reset:
            if self.client_type == 'rules':
                self._client = APIManager.get_api().rules
            elif self.client_type == 'flows':
                self._client = APIManager.get_api().flows
        return self._client

# Signal to reset the API clients when configuration changes
class APIManager:
    _needs_reset = True

    @staticmethod
    def reset_instances():
        APIManager._needs_reset = True

    @staticmethod
    def get_api() -> RulebricksApi:
        if APIManager._needs_reset:
            if Config.api_key is None:
                raise ValueError("API key not set. Please set the API key first.")
            # Instantiate your RulebricksApi here
            APIManager._api = RulebricksApi(base_url=Config.base_url, api_key=Config.api_key, timeout=Config.timeout)
            APIManager._needs_reset = False
        return APIManager._api

    @property
    def needs_reset(self):
        return APIManager._needs_reset

rules: RulesClient = LazyAPIManager('rules')
flows: FlowsClient = LazyAPIManager('flows')
        
class AsyncAPI:
    @property
    def rules(self) -> AsyncRulesClient:
        return APIManager.get_async_api().rules

    @property
    def flows(self) -> AsyncFlowsClient:
        return APIManager.get_async_api().flows

__all__ = [
    "BadRequestError",
    "InternalServerError",
    "ListResponseItem",
    "ListResponseItemRequestSchemaItem",
    "ListResponseItemResponseSchemaItem",
    "UsageResponse",
    "set_api_key",
    "set_instance_url",
    "set_timeout",
    "rules",
    "flows"
    "async_api",
]
