# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .rule_usage import RuleUsage
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class DynamicValue_String(UniversalBaseModel):
    type: typing.Literal["string"] = "string"
    value: typing.Optional[str] = None
    id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    usages: typing.Optional[typing.List[RuleUsage]] = None
    access_groups: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="accessGroups")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DynamicValue_Number(UniversalBaseModel):
    type: typing.Literal["number"] = "number"
    value: typing.Optional[float] = None
    id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    usages: typing.Optional[typing.List[RuleUsage]] = None
    access_groups: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="accessGroups")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DynamicValue_Boolean(UniversalBaseModel):
    type: typing.Literal["boolean"] = "boolean"
    value: typing.Optional[bool] = None
    id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    usages: typing.Optional[typing.List[RuleUsage]] = None
    access_groups: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="accessGroups")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DynamicValue_List(UniversalBaseModel):
    type: typing.Literal["list"] = "list"
    value: typing.Optional[typing.List[str]] = None
    id: typing.Optional[str] = None
    name: typing.Optional[str] = None
    usages: typing.Optional[typing.List[RuleUsage]] = None
    access_groups: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="accessGroups")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


DynamicValue = typing.Union[
    DynamicValue_String, DynamicValue_Number, DynamicValue_Boolean, DynamicValue_List
]
