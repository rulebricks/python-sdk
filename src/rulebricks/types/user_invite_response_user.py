# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class UserInviteResponseUser(UniversalBaseModel):
    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    Email of the invited user.
    """

    role: typing.Optional[str] = pydantic.Field(default=None)
    """
    Role assigned to the user.
    """

    access_groups: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="accessGroups")
    ] = pydantic.Field(default=None)
    """
    Access groups assigned to the user.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
