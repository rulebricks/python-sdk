# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .rule_usage import RuleUsage
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class DynamicValueBase(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for the dynamic value.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the dynamic value.
    """

    usages: typing.Optional[typing.List[RuleUsage]] = pydantic.Field(default=None)
    """
    Rules that use this dynamic value.
    """

    access_groups: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="accessGroups")
    ] = pydantic.Field(default=None)
    """
    Access groups assigned to this value.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
