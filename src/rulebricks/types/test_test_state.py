# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .test_test_state_conditions_item_value import TestTestStateConditionsItemValue
import typing_extensions
from ..core.serialization import FieldMetadata
from .test_test_state_evaluation_error import TestTestStateEvaluationError
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class TestTestState(UniversalBaseModel):
    """
    The state of the test after execution.
    """

    duration: typing.Optional[float] = pydantic.Field(default=None)
    """
    Execution time in seconds
    """

    response: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = (
        pydantic.Field(default=None)
    )
    """
    Actual response returned
    """

    conditions: typing.Optional[
        typing.List[typing.Dict[str, TestTestStateConditionsItemValue]]
    ] = None
    http_status: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="httpStatus")
    ] = pydantic.Field(default=None)
    """
    HTTP status code returned
    """

    success_idxs: typing_extensions.Annotated[
        typing.Optional[typing.List[int]], FieldMetadata(alias="successIdxs")
    ] = None
    evaluation_error: typing_extensions.Annotated[
        typing.Optional[TestTestStateEvaluationError],
        FieldMetadata(alias="evaluationError"),
    ] = pydantic.Field(default=None)
    """
    Error message or flag indicating if evaluation error occurred
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
